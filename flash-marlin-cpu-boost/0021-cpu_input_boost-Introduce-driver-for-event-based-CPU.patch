From 9ea06cdc0ca3e4d4ac0542db4c56fac4acd7ccaf Mon Sep 17 00:00:00 2001
From: Sultan Alsawaf <sultanxda@gmail.com>
Date: Sat, 16 Jun 2018 11:07:17 -0700
Subject: [PATCH 21/26] cpu_input_boost: Introduce driver for event-based CPU
 boosting

This is a clean CPU input boost driver that boosts all online CPUs for a
fixed amount of time. Additionally, there is an API for other drivers to
request a boost kick, so boosting can be done on any custom event. This API
is mainly intended for the framebuffer driver to send a boost kick whenever
there is a new frame ready to be rendered to the display.

This driver also boosts all online CPUs to their maximum frequencies when
the display is powered on (this is the wake boost).

Since this driver requires careful tuning for optimal performance, there
are no user-exposed knobs to configure it. All necessary configuration is
done via the supplied Kconfig options.

This driver is designed for heterogeneous multi-processor systems with two
CPU clusters.

Signed-off-by: Sultan Alsawaf <sultanxda@gmail.com>
Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
---
 drivers/cpufreq/Kconfig           |  38 ++++
 drivers/cpufreq/Makefile          |   3 +
 drivers/cpufreq/cpu_input_boost.c | 367 ++++++++++++++++++++++++++++++
 include/linux/cpu_input_boost.h   |  24 ++
 4 files changed, 432 insertions(+)
 create mode 100644 drivers/cpufreq/cpu_input_boost.c
 create mode 100644 include/linux/cpu_input_boost.h

diff --git a/drivers/cpufreq/Kconfig b/drivers/cpufreq/Kconfig
index 33c9b600e860..fe834c3734ec 100644
--- a/drivers/cpufreq/Kconfig
+++ b/drivers/cpufreq/Kconfig
@@ -230,6 +230,44 @@ config CPU_FREQ_GOV_SCHED
 
 	  If in doubt, say N.
 
+config CPU_INPUT_BOOST
+	bool "CPU Input Boost"
+	help
+	  Boosts the CPU on touchscreen and touchpad input, and allows for
+	  boosting on other custom events, mainly which is intended to be for
+	  boosting when there is a new frame ready to be rendered to the
+	  display. The boost frequencies for this driver should be set so that
+	  frame drops are near-zero at the boosted frequencies and power
+	  consumption is minimized at said frequency combination.
+
+if CPU_INPUT_BOOST
+
+config INPUT_BOOST_DURATION_MS
+	int "Input boost duration"
+	default "100"
+	help
+	  Input boost duration in milliseconds.
+
+config WAKE_BOOST_DURATION_MS
+	int "Wake boost duration"
+	default "1000"
+	help
+	  Wake boost duration in milliseconds.
+
+config INPUT_BOOST_FREQ_LP
+	int "Low-power cluster boost freq"
+	default "0"
+	help
+	  Input boost frequency for the low-power CPU cluster.
+
+config INPUT_BOOST_FREQ_PERF
+	int "Performance cluster boost freq"
+	default "0"
+	help
+	  Input boost frequency for the performance CPU cluster.
+
+endif
+
 comment "CPU frequency scaling drivers"
 
 config CPUFREQ_DT
diff --git a/drivers/cpufreq/Makefile b/drivers/cpufreq/Makefile
index daefc10a28d3..8579a924c1e4 100644
--- a/drivers/cpufreq/Makefile
+++ b/drivers/cpufreq/Makefile
@@ -13,6 +13,9 @@ obj-$(CONFIG_CPU_FREQ_GOV_CONSERVATIVE)	+= cpufreq_conservative.o
 obj-$(CONFIG_CPU_FREQ_GOV_INTERACTIVE)	+= cpufreq_interactive.o
 obj-$(CONFIG_CPU_FREQ_GOV_COMMON)		+= cpufreq_governor.o
 
+# CPU Input Boost
+obj-$(CONFIG_CPU_INPUT_BOOST)		+= cpu_input_boost.o
+
 obj-$(CONFIG_CPUFREQ_DT)		+= cpufreq-dt.o
 
 ##################################################################################
diff --git a/drivers/cpufreq/cpu_input_boost.c b/drivers/cpufreq/cpu_input_boost.c
new file mode 100644
index 000000000000..4115ce168fa0
--- /dev/null
+++ b/drivers/cpufreq/cpu_input_boost.c
@@ -0,0 +1,367 @@
+/*
+ * Copyright (C) 2018, Sultan Alsawaf <sultanxda@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#define pr_fmt(fmt) "cpu_input_boost: " fmt
+
+#include <linux/cpu.h>
+#include <linux/cpufreq.h>
+#include <linux/fb.h>
+#include <linux/input.h>
+#include <linux/slab.h>
+
+/* Available bits for boost_drv state */
+#define SCREEN_AWAKE		(1U << 0)
+#define INPUT_BOOST		(1U << 1)
+#define WAKE_BOOST		(1U << 2)
+
+struct boost_drv {
+	struct workqueue_struct *wq;
+	struct work_struct input_boost;
+	struct delayed_work input_unboost;
+	struct work_struct wake_boost;
+	struct delayed_work wake_unboost;
+	struct notifier_block cpu_notif;
+	struct notifier_block fb_notif;
+	spinlock_t lock;
+	u32 state;
+};
+
+static struct boost_drv *boost_drv_g;
+
+void cpu_input_boost_kick(void)
+{
+	struct boost_drv *b = boost_drv_g;
+
+	if (!b)
+		return;
+
+	queue_work(b->wq, &b->input_boost);
+}
+
+static u32 get_boost_freq(struct boost_drv *b, u32 cpu)
+{
+	if (cpumask_test_cpu(cpu, cpu_lp_mask))
+		return CONFIG_INPUT_BOOST_FREQ_LP;
+
+	return CONFIG_INPUT_BOOST_FREQ_PERF;
+}
+
+static u32 get_boost_state(struct boost_drv *b)
+{
+	u32 state;
+
+	spin_lock(&b->lock);
+	state = b->state;
+	spin_unlock(&b->lock);
+
+	return state;
+}
+
+static void set_boost_bit(struct boost_drv *b, u32 state)
+{
+	spin_lock(&b->lock);
+	b->state |= state;
+	spin_unlock(&b->lock);
+}
+
+static void clear_boost_bit(struct boost_drv *b, u32 state)
+{
+	spin_lock(&b->lock);
+	b->state &= ~state;
+	spin_unlock(&b->lock);
+}
+
+static void update_online_cpu_policy(void)
+{
+	u32 cpu;
+
+	/* Trigger cpufreq notifier for online CPUs */
+	get_online_cpus();
+	for_each_online_cpu(cpu)
+		cpufreq_update_policy(cpu);
+	put_online_cpus();
+}
+
+static void unboost_all_cpus(struct boost_drv *b)
+{
+	if (!cancel_delayed_work_sync(&b->input_unboost) &&
+		!cancel_delayed_work_sync(&b->wake_unboost))
+		return;
+
+	clear_boost_bit(b, WAKE_BOOST | INPUT_BOOST);
+	update_online_cpu_policy();
+}
+
+static void input_boost_worker(struct work_struct *work)
+{
+	struct boost_drv *b = container_of(work, typeof(*b), input_boost);
+
+	if (!cancel_delayed_work_sync(&b->input_unboost)) {
+		set_boost_bit(b, INPUT_BOOST);
+		update_online_cpu_policy();
+	}
+
+	queue_delayed_work(b->wq, &b->input_unboost,
+		msecs_to_jiffies(CONFIG_INPUT_BOOST_DURATION_MS));
+}
+
+static void input_unboost_worker(struct work_struct *work)
+{
+	struct boost_drv *b =
+		container_of(to_delayed_work(work), typeof(*b), input_unboost);
+
+	clear_boost_bit(b, INPUT_BOOST);
+	update_online_cpu_policy();
+}
+
+static void wake_boost_worker(struct work_struct *work)
+{
+	struct boost_drv *b = container_of(work, typeof(*b), wake_boost);
+
+	if (!cancel_delayed_work_sync(&b->wake_unboost)) {
+		set_boost_bit(b, WAKE_BOOST);
+		update_online_cpu_policy();
+	}
+
+	queue_delayed_work(b->wq, &b->wake_unboost,
+		msecs_to_jiffies(CONFIG_WAKE_BOOST_DURATION_MS));
+}
+
+static void wake_unboost_worker(struct work_struct *work)
+{
+	struct boost_drv *b =
+		container_of(to_delayed_work(work), typeof(*b), wake_unboost);
+
+	clear_boost_bit(b, WAKE_BOOST);
+	update_online_cpu_policy();
+}
+
+static int cpu_notifier_cb(struct notifier_block *nb,
+	unsigned long action, void *data)
+{
+	struct boost_drv *b = container_of(nb, typeof(*b), cpu_notif);
+	struct cpufreq_policy *policy = data;
+	u32 boost_freq, state;
+
+	if (action != CPUFREQ_ADJUST)
+		return NOTIFY_OK;
+
+	state = get_boost_state(b);
+
+	/* Boost CPU to max frequency for wake boost */
+	if (state & WAKE_BOOST) {
+		policy->min = policy->max;
+		return NOTIFY_OK;
+	}
+
+	/*
+	 * Boost to policy->max if the boost frequency is higher. When
+	 * unboosting, set policy->min to the absolute min freq for the CPU.
+	 */
+	if (state & INPUT_BOOST) {
+		boost_freq = get_boost_freq(b, policy->cpu);
+		policy->min = min(policy->max, boost_freq);
+	} else {
+		policy->min = policy->cpuinfo.min_freq;
+	}
+
+	return NOTIFY_OK;
+}
+
+static int fb_notifier_cb(struct notifier_block *nb,
+	unsigned long action, void *data)
+{
+	struct boost_drv *b = container_of(nb, typeof(*b), fb_notif);
+	struct fb_event *evdata = data;
+	int *blank = evdata->data;
+	u32 state;
+
+	/* Parse framebuffer blank events as soon as they occur */
+	if (action != FB_EARLY_EVENT_BLANK)
+		return NOTIFY_OK;
+
+	state = get_boost_state(b);
+
+	/* Boost when the screen turns on and unboost when it turns off */
+	if (*blank == FB_BLANK_UNBLANK) {
+		set_boost_bit(b, SCREEN_AWAKE);
+		queue_work(b->wq, &b->wake_boost);
+	} else {
+		clear_boost_bit(b, SCREEN_AWAKE);
+		unboost_all_cpus(b);
+	}
+
+	return NOTIFY_OK;
+}
+
+static void cpu_input_boost_input_event(struct input_handle *handle,
+	unsigned int type, unsigned int code, int value)
+{
+	struct boost_drv *b = handle->handler->private;
+	u32 state;
+
+	state = get_boost_state(b);
+
+	if (!(state & SCREEN_AWAKE))
+		return;
+
+	queue_work(b->wq, &b->input_boost);
+}
+
+static int cpu_input_boost_input_connect(struct input_handler *handler,
+	struct input_dev *dev, const struct input_device_id *id)
+{
+	struct input_handle *handle;
+	int ret;
+
+	handle = kzalloc(sizeof(*handle), GFP_KERNEL);
+	if (!handle)
+		return -ENOMEM;
+
+	handle->dev = dev;
+	handle->handler = handler;
+	handle->name = "cpu_input_boost_handle";
+
+	ret = input_register_handle(handle);
+	if (ret)
+		goto free_handle;
+
+	ret = input_open_device(handle);
+	if (ret)
+		goto unregister_handle;
+
+	return 0;
+
+unregister_handle:
+	input_unregister_handle(handle);
+free_handle:
+	kfree(handle);
+	return ret;
+}
+
+static void cpu_input_boost_input_disconnect(struct input_handle *handle)
+{
+	input_close_device(handle);
+	input_unregister_handle(handle);
+	kfree(handle);
+}
+
+static const struct input_device_id cpu_input_boost_ids[] = {
+	/* Multi-touch touchscreen */
+	{
+		.flags = INPUT_DEVICE_ID_MATCH_EVBIT |
+			INPUT_DEVICE_ID_MATCH_ABSBIT,
+		.evbit = { BIT_MASK(EV_ABS) },
+		.absbit = { [BIT_WORD(ABS_MT_POSITION_X)] =
+			BIT_MASK(ABS_MT_POSITION_X) |
+			BIT_MASK(ABS_MT_POSITION_Y) },
+	},
+	/* Touchpad */
+	{
+		.flags = INPUT_DEVICE_ID_MATCH_KEYBIT |
+			INPUT_DEVICE_ID_MATCH_ABSBIT,
+		.keybit = { [BIT_WORD(BTN_TOUCH)] = BIT_MASK(BTN_TOUCH) },
+		.absbit = { [BIT_WORD(ABS_X)] =
+			BIT_MASK(ABS_X) | BIT_MASK(ABS_Y) },
+	},
+	/* Keypad */
+	{
+		.flags = INPUT_DEVICE_ID_MATCH_EVBIT,
+		.evbit = { BIT_MASK(EV_KEY) },
+	},
+	{ }
+};
+
+static struct input_handler cpu_input_boost_input_handler = {
+	.event		= cpu_input_boost_input_event,
+	.connect	= cpu_input_boost_input_connect,
+	.disconnect	= cpu_input_boost_input_disconnect,
+	.name		= "cpu_input_boost_handler",
+	.id_table	= cpu_input_boost_ids
+};
+
+static struct boost_drv *alloc_boost_drv(void)
+{
+	struct boost_drv *b;
+
+	b = kzalloc(sizeof(*b), GFP_KERNEL);
+	if (!b)
+		return NULL;
+
+	b->wq = alloc_workqueue("cpu_input_boost_wq", WQ_HIGHPRI, 0);
+	if (!b->wq) {
+		pr_err("Failed to allocate workqueue\n");
+		goto free_b;
+	}
+
+	return b;
+
+free_b:
+	kfree(b);
+	return NULL;
+}
+
+static int __init cpu_input_boost_init(void)
+{
+	struct boost_drv *b;
+	int ret;
+
+	b = alloc_boost_drv();
+	if (!b) {
+		pr_err("Failed to allocate boost_drv struct\n");
+		return -ENOMEM;
+	}
+
+	spin_lock_init(&b->lock);
+	INIT_WORK(&b->input_boost, input_boost_worker);
+	INIT_DELAYED_WORK(&b->input_unboost, input_unboost_worker);
+	INIT_WORK(&b->wake_boost, wake_boost_worker);
+	INIT_DELAYED_WORK(&b->wake_unboost, wake_unboost_worker);
+	b->state = SCREEN_AWAKE;
+
+	b->cpu_notif.notifier_call = cpu_notifier_cb;
+	ret = cpufreq_register_notifier(&b->cpu_notif, CPUFREQ_POLICY_NOTIFIER);
+	if (ret) {
+		pr_err("Failed to register cpufreq notifier, err: %d\n", ret);
+		goto free_b;
+	}
+
+	cpu_input_boost_input_handler.private = b;
+	ret = input_register_handler(&cpu_input_boost_input_handler);
+	if (ret) {
+		pr_err("Failed to register input handler, err: %d\n", ret);
+		goto unregister_cpu_notif;
+	}
+
+	b->fb_notif.notifier_call = fb_notifier_cb;
+	b->fb_notif.priority = INT_MAX;
+	ret = fb_register_client(&b->fb_notif);
+	if (ret) {
+		pr_err("Failed to register fb notifier, err: %d\n", ret);
+		goto unregister_handler;
+	}
+
+	/* Allow global boost config access for external boosts */
+	boost_drv_g = b;
+
+	return 0;
+
+unregister_handler:
+	input_unregister_handler(&cpu_input_boost_input_handler);
+unregister_cpu_notif:
+	cpufreq_unregister_notifier(&b->cpu_notif, CPUFREQ_POLICY_NOTIFIER);
+free_b:
+	kfree(b);
+	return ret;
+}
+late_initcall(cpu_input_boost_init);
diff --git a/include/linux/cpu_input_boost.h b/include/linux/cpu_input_boost.h
new file mode 100644
index 000000000000..6a0b25a25c8b
--- /dev/null
+++ b/include/linux/cpu_input_boost.h
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2018, Sultan Alsawaf <sultanxda@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#ifndef _CPU_INPUT_BOOST_H_
+#define _CPU_INPUT_BOOST_H_
+
+#ifdef CONFIG_CPU_INPUT_BOOST
+void cpu_input_boost_kick(void);
+#else
+static inline void cpu_input_boost_kick(void)
+{
+}
+#endif
+
+#endif /* _CPU_INPUT_BOOST_H_ */
-- 
2.18.0

