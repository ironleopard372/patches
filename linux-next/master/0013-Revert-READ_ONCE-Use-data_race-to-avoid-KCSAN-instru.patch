From 070faefd2aeee7ba0bf81b072a365e4141cecebe Mon Sep 17 00:00:00 2001
From: Nathan Chancellor <natechancellor@gmail.com>
Date: Wed, 20 May 2020 03:20:09 -0700
Subject: [PATCH 13/13] Revert "READ_ONCE: Use data_race() to avoid KCSAN
 instrumentation"

This reverts commit cdd28ad2d8110099e43527e96d059c5639809680.

Results in horrific compile time regression.

Link: https://github.com/ClangBuiltLinux/linux/issues/1032
Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
---
 include/linux/compiler.h | 54 ++++++++++++++++++++++------------------
 1 file changed, 30 insertions(+), 24 deletions(-)

diff --git a/include/linux/compiler.h b/include/linux/compiler.h
index 0b6ed2e17923..7d4c9a3938a0 100644
--- a/include/linux/compiler.h
+++ b/include/linux/compiler.h
@@ -216,26 +216,6 @@ void ftrace_likely_update(struct ftrace_likely_data *f, int val,
 #include <linux/kasan-checks.h>
 #include <linux/kcsan-checks.h>
 
-/**
- * data_race - mark an expression as containing intentional data races
- *
- * This data_race() macro is useful for situations in which data races
- * should be forgiven.  One example is diagnostic code that accesses
- * shared variables but is not a part of the core synchronization design.
- *
- * This macro *does not* affect normal code generation, but is a hint
- * to tooling that data races here are to be ignored.
- */
-#define data_race(expr)							\
-({									\
-	__kcsan_disable_current();					\
-	({								\
-		__unqual_scalar_typeof(({ expr; })) __v = ({ expr; });	\
-		__kcsan_enable_current();				\
-		__v;							\
-	});								\
-})
-
 /*
  * Use __READ_ONCE() instead of READ_ONCE() if you do not require any
  * atomicity or dependency ordering guarantees. Note that this may result
@@ -246,10 +226,14 @@ void ftrace_likely_update(struct ftrace_likely_data *f, int val,
 #define __READ_ONCE_SCALAR(x)						\
 ({									\
 	typeof(x) *__xp = &(x);						\
-	__unqual_scalar_typeof(x) __x = data_race(__READ_ONCE(*__xp));	\
 	kcsan_check_atomic_read(__xp, sizeof(*__xp));			\
-	smp_read_barrier_depends();					\
-	(typeof(x))__x;							\
+	__kcsan_disable_current();					\
+	({								\
+		__unqual_scalar_typeof(x) __x = __READ_ONCE(*__xp);	\
+		__kcsan_enable_current();				\
+		smp_read_barrier_depends();				\
+		(typeof(x))__x;						\
+	});								\
 })
 
 #define READ_ONCE(x)							\
@@ -267,7 +251,9 @@ do {									\
 do {									\
 	typeof(x) *__xp = &(x);						\
 	kcsan_check_atomic_write(__xp, sizeof(*__xp));			\
-	data_race(({ __WRITE_ONCE(*__xp, val); 0; }));			\
+	__kcsan_disable_current();					\
+	__WRITE_ONCE(*__xp, val);					\
+	__kcsan_enable_current();					\
 } while (0)
 
 #define WRITE_ONCE(x, val)						\
@@ -335,6 +321,26 @@ unsigned long read_word_at_a_time(const void *addr)
 	return *(unsigned long *)addr;
 }
 
+/**
+ * data_race - mark an expression as containing intentional data races
+ *
+ * This data_race() macro is useful for situations in which data races
+ * should be forgiven.  One example is diagnostic code that accesses
+ * shared variables but is not a part of the core synchronization design.
+ *
+ * This macro *does not* affect normal code generation, but is a hint
+ * to tooling that data races here are to be ignored.
+ */
+#define data_race(expr)							\
+({									\
+	__kcsan_disable_current();					\
+	({								\
+		__unqual_scalar_typeof(({ expr; })) __v = ({ expr; });	\
+		__kcsan_enable_current();				\
+		__v;							\
+	});								\
+})
+
 #endif /* __KERNEL__ */
 
 /*
-- 
2.27.0.rc0

