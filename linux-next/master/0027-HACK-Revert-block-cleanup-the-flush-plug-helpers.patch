From d78d82bc548a093536d8c67eff8c20a1e0461362 Mon Sep 17 00:00:00 2001
From: Nathan Chancellor <nathan@kernel.org>
Date: Fri, 22 Oct 2021 17:48:36 -0700
Subject: [PATCH 27/28] HACK: Revert "block: cleanup the flush plug helpers"

This reverts commit 008f75a20e7072d0840ec323c39b42206f3fa8a0.

Link: https://lore.kernel.org/r/YXMaZoQJiR5WFZTw@archlinux-ax161/
Signed-off-by: Nathan Chancellor <nathan@kernel.org>
---
 block/blk-core.c       | 13 +++++++------
 fs/fs-writeback.c      |  5 ++---
 include/linux/blkdev.h | 29 +++++++++++++++++++++++++----
 kernel/sched/core.c    |  5 ++---
 4 files changed, 36 insertions(+), 16 deletions(-)

diff --git a/block/blk-core.c b/block/blk-core.c
index fd389a16013c..65275f44c92f 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -1089,7 +1089,7 @@ int bio_poll(struct bio *bio, struct io_comp_batch *iob, unsigned int flags)
 		return 0;
 
 	if (current->plug)
-		blk_flush_plug(current->plug, false);
+		blk_flush_plug_list(current->plug, false);
 
 	if (blk_queue_enter(q, BLK_MQ_REQ_NOWAIT))
 		return 0;
@@ -1637,7 +1637,7 @@ struct blk_plug_cb *blk_check_plugged(blk_plug_cb_fn unplug, void *data,
 }
 EXPORT_SYMBOL(blk_check_plugged);
 
-void blk_flush_plug(struct blk_plug *plug, bool from_schedule)
+void blk_flush_plug_list(struct blk_plug *plug, bool from_schedule)
 {
 	if (!list_empty(&plug->cb_list))
 		flush_plug_callbacks(plug, from_schedule);
@@ -1659,10 +1659,11 @@ void blk_flush_plug(struct blk_plug *plug, bool from_schedule)
  */
 void blk_finish_plug(struct blk_plug *plug)
 {
-	if (plug == current->plug) {
-		blk_flush_plug(plug, false);
-		current->plug = NULL;
-	}
+	if (plug != current->plug)
+		return;
+	blk_flush_plug_list(plug, false);
+
+	current->plug = NULL;
 }
 EXPORT_SYMBOL(blk_finish_plug);
 
diff --git a/fs/fs-writeback.c b/fs/fs-writeback.c
index 4124a89a1a5d..81ec192ce067 100644
--- a/fs/fs-writeback.c
+++ b/fs/fs-writeback.c
@@ -1893,8 +1893,7 @@ static long writeback_sb_inodes(struct super_block *sb,
 			 * unplug, so get our IOs out the door before we
 			 * give up the CPU.
 			 */
-			if (current->plug)
-				blk_flush_plug(current->plug, false);
+			blk_flush_plug(current);
 			cond_resched();
 		}
 
@@ -2292,7 +2291,7 @@ void wakeup_flusher_threads(enum wb_reason reason)
 	 * If we are expecting writeback progress we must submit plugged IO.
 	 */
 	if (blk_needs_flush_plug(current))
-		blk_flush_plug(current->plug, true);
+		blk_schedule_flush_plug(current);
 
 	rcu_read_lock();
 	list_for_each_entry_rcu(bdi, &bdi_list, bdi_list)
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index c73bcb727d77..f1d59910ed91 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -707,8 +707,9 @@ extern void blk_set_queue_dying(struct request_queue *);
  * as the lock contention for request_queue lock is reduced.
  *
  * It is ok not to disable preemption when adding the request to the plug list
- * or when attempting a merge. For details, please see schedule() where
- * blk_flush_plug() is called.
+ * or when attempting a merge, because blk_schedule_flush_list() will only flush
+ * the plug list when the task sleeps by itself. For details, please see
+ * schedule() where blk_schedule_flush_plug() is called.
  */
 struct blk_plug {
 	struct request *mq_list; /* blk-mq requests */
@@ -738,8 +739,23 @@ extern struct blk_plug_cb *blk_check_plugged(blk_plug_cb_fn unplug,
 extern void blk_start_plug(struct blk_plug *);
 extern void blk_start_plug_nr_ios(struct blk_plug *, unsigned short);
 extern void blk_finish_plug(struct blk_plug *);
+extern void blk_flush_plug_list(struct blk_plug *, bool);
 
-void blk_flush_plug(struct blk_plug *plug, bool from_schedule);
+static inline void blk_flush_plug(struct task_struct *tsk)
+{
+	struct blk_plug *plug = tsk->plug;
+
+	if (plug)
+		blk_flush_plug_list(plug, false);
+}
+
+static inline void blk_schedule_flush_plug(struct task_struct *tsk)
+{
+	struct blk_plug *plug = tsk->plug;
+
+	if (plug)
+		blk_flush_plug_list(plug, true);
+}
 
 static inline bool blk_needs_flush_plug(struct task_struct *tsk)
 {
@@ -768,10 +784,15 @@ static inline void blk_finish_plug(struct blk_plug *plug)
 {
 }
 
-static inline void blk_flush_plug(struct blk_plug *plug, bool async)
+static inline void blk_flush_plug(struct task_struct *task)
+{
+}
+
+static inline void blk_schedule_flush_plug(struct task_struct *task)
 {
 }
 
+
 static inline bool blk_needs_flush_plug(struct task_struct *tsk)
 {
 	return false;
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 53f00e310427..bc08b1a28859 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -6296,7 +6296,7 @@ static inline void sched_submit_work(struct task_struct *tsk)
 	 * make sure to submit it to avoid deadlocks.
 	 */
 	if (blk_needs_flush_plug(tsk))
-		blk_flush_plug(tsk->plug, true);
+		blk_schedule_flush_plug(tsk);
 }
 
 static void sched_update_worker(struct task_struct *tsk)
@@ -8328,8 +8328,7 @@ int io_schedule_prepare(void)
 	int old_iowait = current->in_iowait;
 
 	current->in_iowait = 1;
-	if (current->plug)
-		blk_flush_plug(current->plug, true);
+	blk_schedule_flush_plug(current);
 
 	return old_iowait;
 }
-- 
2.33.1.637.gf443b226ca

